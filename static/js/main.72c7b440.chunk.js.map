{"version":3,"sources":["components/grade.js","components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Grade","props","state","amountOfGrade","incrementAmountOfGrade","bind","updateAmountOfGrade","increment","this","previousAmountOfGrade","setState","sendUpdate","event","updatedAmountOfGrades","parseInt","target","value","change","notifyChange","weight","className","grade","level","Button","variant","onClick","type","pattern","onChange","React","Component","Calculator","RULES","config","totalWeight","numberOfGrades","updateContribution","grades","counter","push","key","gpa","toFixed","getGrades","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72c7b440.chunk.js","sourcesContent":["import React from \"react\"\n\nimport Button from \"react-bootstrap/Button\"\n\nexport class Grade extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      amountOfGrade: 0\n    }\n    this.incrementAmountOfGrade = this.incrementAmountOfGrade.bind(this)\n    this.updateAmountOfGrade = this.updateAmountOfGrade.bind(this)\n  }\n\n  incrementAmountOfGrade(increment) {\n    if (!increment && this.state.amountOfGrade === 0) {\n      return;\n    }\n    let previousAmountOfGrade = this.state.amountOfGrade;\n    this.setState({amountOfGrade: this.state.amountOfGrade + (increment ? 1 : -1)}, () => this.sendUpdate(this.state.amountOfGrade - previousAmountOfGrade))\n  }\n\n  updateAmountOfGrade(event) {\n    let previousAmountOfGrade = this.state.amountOfGrade;\n    let updatedAmountOfGrades = parseInt(event.target.value) || 0;\n    this.setState({amountOfGrade: (updatedAmountOfGrades > 0) ? updatedAmountOfGrades : 0}, () => this.sendUpdate(this.state.amountOfGrade - previousAmountOfGrade))\n  }\n\n  sendUpdate(change) {\n    this.props.notifyChange(this.props.weight, change);\n  }\n\n  render() {\n    return (\n      <div className=\"grade\">\n        <p>Grade: {this.props.grade}</p>\n        <p>Level: {this.props.level}</p>\n        <div className=\"controls\">\n          <Button variant=\"primary\" onClick={() => this.incrementAmountOfGrade(true)}>+</Button>\n          <input type=\"text\" pattern=\"[0-9]*\" value={this.state.amountOfGrade} onChange={(event) => this.updateAmountOfGrade(event)}/>\n          <Button variant=\"danger\" onClick={() => this.incrementAmountOfGrade(false)}>-</Button>\n        </div>\n      </div>\n    )\n  }\n}","import React from \"react\"\nimport {Grade} from \"./grade\"\nimport config from \"../config.json\"\n\nexport class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.RULES = config\n\n    this.state = {\n      totalWeight: 0,\n      numberOfGrades: 0\n    }\n    this.updateContribution = this.updateContribution.bind(this)\n  }\n\n  updateContribution(weight, change) {\n    this.setState({totalWeight: this.state.totalWeight - weight * change, numberOfGrades: this.state.numberOfGrades - change});\n  }\n\n  getGrades() {\n    let grades = []\n    let counter = 0\n    for (let grade in this.RULES) {\n      for (let level in this.RULES[grade]) {\n        let weight = this.RULES[grade][level]\n        grades.push(\n          <Grade grade={grade} level={level} weight={weight} notifyChange={this.updateContribution} key={counter}/>\n        )\n        counter++;\n      }\n    }\n    return grades\n  }\n\n  render() {\n    let gpa = (this.state.totalWeight / (this.state.numberOfGrades !== 0 ? this.state.numberOfGrades : 1)).toFixed(5)\n    let grades = this.getGrades()\n    return (\n    <div className=\"calculator\">\n      <p>GPA: { gpa }</p>\n      <div className=\"grades\">\n        { grades }\n      </div>\n    </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport {Calculator} from \"./components/calculator\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}